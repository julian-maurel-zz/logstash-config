input {
    beats {
        port => "5044"
    }
    tcp {
     host => "127.0.0.1"
     port => 5045
    } 
}
filter {
	if "catalina.out" in [path] or "jahia.log" in [path] {
		if "Rendered" in [message] {
			grok {
		       match => [ "message", "%{BASE_LOGFILE} %{JAHIA_PAGE_RENDERED}" ]
		    }
		    mutate {
		      add_field => { "jahialogtype" => "pageRendered" }
		    }		
	    } else if "Error code: 404" in [message] { 
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} \[Error code: 404]: [a-zA-Z ]+: %{URIPATH:pagePath}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "error 404" }
		    }
	    } else if "Error code: 400" in [message] { 
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} \[Error code: 400]: %{GREEDYDATA:error}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "error 400" }
		    }
	    } else if "[GC" in [message] or "[Full GC" in [message] { # should add non-timestamped GC management
	    	grok {
		       match => [ "message", "(?<timestamp_log>[0-9-]+T[0-9:\.]+\+[0-9]+): \[(?<gc_type>[a-zA-Z]+).*, %{NUMBER:gcDuration:float} secs" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "GC" }
		    }
	    } else if "evictExpiredCacheKeyJob" in [message] and "HTMLCache" in [message]  {
	    	grok {
		       match => [ "message", "(?<timestamp_log>[0-9-]+ [0-9:]+,[0-9]+): (?<loglevel>[A-Za-z$_]+)%{SPACE}\[(?<javaClass>[a-zA-Z\-0-9]+)\] - - %{INT:evictedHTMLCache:int}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "evictHTMLCacheKeys" }
		    }
	    } else if "evictExpiredCacheKeyJob" in [message] and "from the caches" in [message]  {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} Cleaned %{INT:evictedCaches:int}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "evictCacheKeys" }
		    }
	    } 

	    else if "AbstractBundlePersistenceManager" in [message] and "cachename" in [message] {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} cachename=%{WORD:cacheName}.*, elements=%{NUMBER:elements:int}, usedmemorykb=%{NUMBER:usedmemorykb:int}, maxmemorykb=%{NUMBER:maxmemorykb:int}, access=%{NUMBER:access:int}, miss=%{NUMBER:miss:int}" ]
		    }

#	         if "_grokparsefailure" not in [tags] {
#	            ruby {            
#	                  code => "event['cacheRatio'] = event['miss'] / event['access']"      
#	            }    
#	        }
			mutate {
		      add_field => { "jahialogtype" => "bundleCacheStats" }
		    }
		### TODO
		# 2018-03-25 20:02:46,213: INFO [DocNumberCache] - size=131/1024, #accesses=4158, #hits=3458, #misses=700, cacheRatio=84%, size=131/1024, #accesses=4158, #hits=3458, #misses=700, cacheRatio=84% 
		# 2018-03-25 18:15:00,009: INFO [evictExpiredCacheKeyJob] - - 1 from cache HTMLDependenciesCache, - 1 from cache HTMLDependenciesCache
		# 2018-03-25 18:00:00,094: INFO [SchedulerService] - Background job JobHistoryPurgeJob (of type Maintenance) finished with status 'successful' in 27 ms, Background job JobHistoryPurgeJob (of type Maintenance) finished with status 'successful' in 27 ms
		# 2018-03-25 22:24:46,441: INFO  [ModuleFileInstallHandler] - Done processing FileInstall artifacts
		# 2018-03-25 22:26:46,664: INFO  [ModuleFileInstallHandler] - Processing FileInstall artifacts: 0 created, 1 modified, 0 deleted

	    } else {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} %{GREEDYDATA:message}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "unknown" }
		    }
	    }
	    date {
			match => [ "timestamp_log", "YYYY-MM-dd HH:mm:ss,SSS" ]
			target => "@timestamp"
		} 
	}
}


output {
  elasticsearch {
    hosts => ["localhost"]
    manage_template => false
    index => "filebeat-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
  }
}

#output {
#    elasticsearch {
#     hosts => [ "localhost:9200" ]
#     index => "filebeat-%{+YYYY.MM.dd}"
#    } 
#}

#	    else if "ModuleFileInstallHandler" in [message] and "Processing FileInstall" in [message] or "Done processing FileInstall artifacts" in [message] {
#	    	grok {
#		       match => [ "message", "(?<timestamp_log>[0-9-]+ [0-9:]+,[0-9]+): (?<loglevel>[A-Za-z$_]+)%{SPACE}\[(?<javaClass>[a-zA-Z\-0-9]+)\]%{GREEDYDATA:message}" ]
#		    }
#			mutate {
#		      add_field => { "jahialogtype" => "moduleFileInstall" }
#		    }
#
#		       if "Processing FileInstall" in [message] {
#			     aggregate {
#			       task_id => "moduleInstall"
#			       code => "map['moduleDeploymentDuration'] = 0"
#			       map_action => "create"
#			     }
#			   }
#
#			   if "Done processing FileInstall artifacts" in [message] {
#			     aggregate {
#			       task_id => "moduleInstall"
#			       code => "event.set('moduleDeploymentDuration', map['moduleDeploymentDuration'])"
#			       map_action => "update"
#			       end_of_task => true
#			       timeout => 1200
#			     }
#			   }
#
#	    } 